!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{var g;g="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,g.leiSelector=f()}}(function(){return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){"use strict";const Selector=require("./selector");class LeiSelector extends Selector{eq(index){return this.create(this[index])}lt(index){return this.create(this.toArray().slice(0,index))}gt(index){return this.create(this.toArray().slice(index+1))}text(value){return arguments.length>0&&this.each(el=>{el.innerText=value}),this.toArray().map(el=>el.innerText).join("\n")}html(value){return arguments.length>0&&this.each(el=>{el.innerHTML=value}),this.toArray().map(el=>el.innerHTML).join("\n")}remove(){return this.each(el=>el.remove()),this}setStyle(name,value){return this.each(el=>{el.style[name]=value})}getStyle(name){return this[0]&&this[0].style[name]}css(name,value){if(arguments.length>1)return this.setStyle(name,value);if(1===arguments.length){if("string"==typeof name)return this.getStyle(name);const obj=arguments[0];for(const i in obj)this.setStyle(i,obj[i]);return this}throw new Error("invalid argument number of css()")}show(){return this.setStyle("display",""),this}hide(){return this.setStyle("display","none"),this}prop(name,value){if(arguments.length>1)return this.setProp(name,value);if(1===arguments.length){if("string"==typeof name)return this.getProp(name);const obj=arguments[0];for(const i in obj)this.setProp(i,obj[i]);return this}throw new Error("invalid argument number of prop()")}setProp(name,value){return this.each(el=>{el.setAttribute(name,value)})}getProp(name){return this[0]&&this[0].getAttribute(name)}data(name,value){if(arguments.length>1)return this.setData(name,value);if(1===arguments.length){if("string"==typeof name)return this.getData(name);const obj=arguments[0];for(const i in obj)this.setData(i,obj[i]);return this}return this[0]&&this[0].dataset}setData(name,value){return this.each(el=>{el.dataset[name]=value})}getData(name){return this[0]&&this[0].dataset[name]}append(child){if(this[0]){const sel=this.create(child);sel.each(el=>this[0].appendChild(el))}return this}on(type,fn){return this.each(el=>el.addEventListener(type,event=>{fn.call(el,event)}))}once(type,fn){return this.on(type,fn),this.each(el=>el.addEventListener(type,()=>{el.removeEventListener(type,fn)}))}}module.exports=LeiSelector},{"./selector":2}],2:[function(require,module,exports){"use strict";function isHTMLTag(html){const h=html.trim();return"<"===h[0]&&">"===h.slice(-1)}class Selector{constructor(query){if(this.$$query=query,"string"==typeof query)isHTMLTag(query)?this.fromHTML(query):this.fromNodeList(document.querySelectorAll(query));else if(query instanceof Element||query instanceof Node)this.fromNode(query);else if(query instanceof NodeList)this.fromNodeList(query);else if(null===query)this.length=0;else{if(!(query instanceof Selector))throw new Error(`new Selector(query): invalid type of query, must be string, Element or NodeList`);this.fromSelector(query)}}fromHTML(html){const div=document.createElement("div");return div.innerHTML=html,this.fromNodeList(div.childNodes),this}fromNode(el){return this[0]=el,this.length=1,this}fromNodeList(list){for(let i=0;i<list.length;i++)this[i]=list[i];return this.length=list.length,this}fromSelector(sel){for(let i=0;i<sel.length;i++)this[i]=sel[i];return this.length=sel.length,this}toArray(){const list=new Array(this.length);for(let i=0;i<this.length;i++)list[i]=this[i];return list}each(fn){for(let i=0;i<this.length;i++)fn.call(this,this[i]);return this}find(query){if("string"!=typeof query)throw new Error("find(query): query must be string");return this[0]?this.create(this[0].querySelectorAll(query)):this.create(null)}create(query){return new this.constructor(query)}}Selector.from=function(query){return new this(query)},module.exports=Selector},{}]},{},[1])(1)});